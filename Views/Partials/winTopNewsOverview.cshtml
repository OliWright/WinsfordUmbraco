@using Umbraco.Web.Models;
@inherits UmbracoTemplatePage
@{
    // Model.Content is the current page that we're on
    // AncestorsOrSelf is all of the ancestors this page has in the tree
    // (1) means: go up to level 1 and stop looking for more ancestors when you get there
    // First() gets the first ancestor found (the home page, on level 1)
    var homePage = CurrentPage.AncestorsOrSelf(1).First();

    // Find all pages with document type alias umbNewsOverview
	var newsOverviews = homePage.Descendants( "umbNewsOverview" );
    
    // Similar to above: find all pages with document type umbNewsItem under the news overview page
    // Then order them, first by publishDate (a property the editor can explicitly set on the news item)
    // and then by createDate, which is set by Umbraco automatically when a page gets created.
    // Finally, take the first 5 items to show in the news overview
	dynamic topNewsItems = new DynamicPublishedContentList();
	var titles = "";
    foreach (var newsOverview in newsOverviews)
	{
	    var newsItems = newsOverview.umbNewsItems.OrderBy("publishDate desc, createDate desc").Take(5);
		foreach( var item in newsItems )
		{
			topNewsItems.Add( item );
		}
	}

    // If the editor has not explicitly provided the "Page title" property page 
    // then just show the name of the page otherwise show the provided title
    var pageTitle = "News";//string.IsNullOrWhiteSpace(newsOverview.Title)
        //? newsOverview.Name
        //: newsOverview.Title;
    
    // The newest news item should be featured, so take the first one of the items we found
    //var featuredNewsItem = topNewsItems.First();
	
	//var orderedNews = topNewsItems.OrderBy("publishDate desc, createDate desc");
	
	var featuredNewsItem = topNewsItems.OrderBy("publishDate desc, createDate desc").First();
	var test = featuredNewsItem.GetType().FullName;
    
    // If the editor has not explicitly provided the "Page title" property page 
    // then just show the name of the page otherwise show the provided title
    var featuredNewsItemTitle = string.IsNullOrWhiteSpace(featuredNewsItem.Title) 
        ? featuredNewsItem.Name 
        : featuredNewsItem.Title;
    
    // If the editor has not explicitly set the publishDate property then show the create date
    var featuredNewsItemDateTime = featuredNewsItem.PublishDate == default(DateTime) 
        ? featuredNewsItem.CreateDate 
        : featuredNewsItem.PublishDate;
}

<!-- Blog -->
<section class="is-blog">
    <h2 class="major"><span>@pageTitle</span></h2>
    <div>
		<!-- Featured Post -->
		<article class="is-post">
			<header>
				<h3><a href="@featuredNewsItem.Url">@featuredNewsItemTitle</a></h3>
				<span class="byline">@featuredNewsItem.SubHeader</span>
				<ul class="meta">
					<li class="timestamp">@(featuredNewsItemDateTime.ToString("f"))</li>
				</ul>
			</header>
						
			@{
				if (featuredNewsItem.HasValue("Image"))
				{
					var featureImage = Umbraco.TypedMedia((int)featuredNewsItem.Image);
					<a href="@featuredNewsItem.Url" class="image image-full">
					<noscript data-slimmage>
					<img src="@featureImage.GetCropUrl( 270, 161, ratioMode:ImageCropRatioMode.Height )" />
					</noscript>									
					</a>
				}
			}    
			
			@Umbraco.Truncate(featuredNewsItem.BodyText, 200, true, false)
	
			<a href="@featuredNewsItem.Url" class="button">Continue Reading</a>
		</article>
		<!-- /Featured Post -->
    </div>
</section>
<!-- /Blog -->